apply from: "${rootProject.projectDir}/gradle/verifyComponentConfig.gradle"
apply from: "${rootProject.projectDir}/gradle/utils.gradle"

apply plugin: 'osgi'
apply plugin: 'scr'
apply plugin: 'sling-bundle'
apply plugin: 'protobuf'

// remove "mvn install" since it's not needed and causes a conflict
def installTask = tasks.findByPath('install')
if (installTask != null) tasks.remove(installTask)

apply plugin: 'cqpackage'

ext.bundleName = 'TWC Grabbit'
ext.bundleDescription = 'TWC Grabbit'
ext.symbolicName = "com.twc.grabbit"

cqPackage.bundleInstallRoot = '/apps/grabbit/install'
cqPackage.nativeStartLevel = 30
cqPackage.dependencyStartLevel = 20

bundle.installPath = '/apps/grabbit/install/${cqPackage.nativeStartLevel}'

dependencies {
    // This project's runtime for inclusion in the CQ package
    cq_package project(path: ":${name}", configuration: 'runtime')
    cq_package project(path: ":${name}", configuration: 'default')

    native_cq_package files("${project.jar.archivePath}")
}


jar {
    from ('src/main/content/SLING-INF/content', {
        into 'SLING-INF/content'
    })
}

jar.manifest {

    attributes 'Sling-Initial-Content': project.configFolders.collect {
        "SLING-INF/content/apps/grabbit/${it}; overwrite:=true; uninstall:=true; path:=/apps/grabbit/${it}"
    }.join(', ')

    attributes 'Bundle-Name': project.bundleName
    attributes 'Bundle-SymbolicName': project.symbolicName
    attributes 'Bundle-Description': project.bundleDescription
    instruction 'Import-Package', 'org.apache.felix.scr.annotations; version="[1.7,2.0)"'
    instruction 'Import-Package', 'groovy.json; version="[2.3,3.0)"'
    instruction 'Import-Package', 'groovy.json.internal; version="[2.3,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.scope; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.item.file.transform; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.item.file; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.item.support; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.configuration.xml; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.configuration.support; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.explore.support; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.repository.support; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.repository; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.launch.support; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.job.flow.support; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.job.flow.support.state; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.core.repository.dao; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.batch.support.transaction; version="[2.2,3.0)"'
    instruction 'Import-Package', 'org.springframework.beans.factory.config; version="[3.1,4.0)"'
    instruction 'Import-Package', 'org.springframework.core.io; version="[3.1,4.0)"'
    instruction 'Import-Package', 'org.springframework.core.task; version="[3.1,4.0)"'
    instruction 'Import-Package', 'org.springframework.aop; version="[3.1,4.0)"'
    instruction 'Import-Package', 'org.springframework.aop.framework; version="[3.1,4.0)"'
    instruction 'Import-Package', 'org.springframework.aop.scope; version="[3.1,4.0)"'
    instruction 'Import-Package', 'org.springframework.scheduling.concurrent; version="[3.1,4.0)"'
    instruction 'Import-Package', "org.aopalliance.aop;version=1.0.0"
    instruction 'Import-Package', '*'


    // export everything to OSGi except *.impl packages
    instruction 'Export-Package', "!*.impl, *;-noimport:=false;version=${version}"
}

// exclude bundles provided by CQ
configurations.cq_package {
    exclude group: 'javax.servlet', module: 'servlet-api'
    exclude group: 'commons-logging', module: 'commons-logging'
    exclude group: 'commons-httpclient', module: 'commons-httpclient'
    exclude group: 'com.adobe.granite'
    exclude group: 'javax.xml.stream'
    exclude group: 'javax.xml.bind'
    exclude group: 'javax.activation'
    exclude group: 'com.sun.xml.bind'
    exclude group: 'wsdl4j', module: 'wsdl4j'
    exclude group: 'aopalliance', module: 'aopalliance'
    exclude group: 'xml-apis', module: 'xml-apis'

    //removed for AEM5.6
    exclude group: 'org.apache.geronimo.specs', module: 'geronimo-osgi-registry'
    exclude group: 'org.gagravarr', module: 'vorbis-java-core'
    exclude group: 'org.gagravarr', module: 'vorbis-java-tika'
    exclude group: 'org.tukaani', module: 'xz'
    exclude group: 'edu.ucar', module: 'netcdf'
    exclude group: 'org.bouncycastle', module: 'bcprov-jdk15'
    exclude group: 'org.bouncycastle', module: 'bcmail-jdk15'
    exclude group: 'de.l3s.boilerpipe', module: 'boilerpipe'
    exclude group: 'com.googlecode.mp4parser', module: 'isoparser'
    exclude group: 'com.googlecode.juniversalchardet', module: 'juniversalchardet'
    exclude group: 'com.drewnoakes', module: 'metadata-extractor'
    exclude group: 'asm', module: 'asm'
    exclude group: 'org.jdom', module: 'jdom'
    exclude group: 'rome', module: 'rome'

    exclude group: 'org.apache.poi'
    exclude group: 'org.apache.xmlbeans'
    exclude group: 'org.dom4j'
    exclude group: 'org.ccil.cowan.tagsoup'
    exclude group: 'org.aspectj'
    exclude group: 'com.adobe.xmp'
    exclude group: 'org.apache.xerces.impl'

    // use CQ's logging, not logback
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'ch.qos.logback', module: 'logback-core'

    // excluding Joda Time too as AEM5.6 provides its own in com.day.commons.osgi.wrapper.joda-time
    exclude group: 'joda-time', module: 'joda-time'
    
    exclude group: 'com.day.commons', module: 'day-commons-gfx'
    exclude group: 'com.day.commons', module: 'day-commons-any'
    exclude group: 'com.google.code.findbugs', module: 'jsr305'

    exclude group: 'com.day.cq.workflow', module: 'cq-workflow-console'
}

bundle.installPath = '/apps/grabbit/install/${nativeStartLevel}'

idea {
    module {
        // The whole build dir is excluded by default, but we need build/generated-sources,
        // which contains the generated proto classes.
        excludeDirs = [
            file("$buildDir/classes"),
            file("$buildDir/docs"),
            file("$buildDir/dependency-cache"),
            file("$buildDir/libs"),
            file("$buildDir/reports"),
            file("$buildDir/resources"),
            file("$buildDir/test-results"),
            file("$buildDir/tmp"),
        ]
    }
}
